@using Microsoft.AspNetCore.Components.Web

<img src="@CurrentImageUrl" 
     alt="@Alt" 
     class="@CssClass" 
     style="@Style"
     @onerror="OnImageError" 
     @onload="OnImageLoad" />

@code {
    [Parameter] public string Make { get; set; } = string.Empty;
    [Parameter] public string Model { get; set; } = string.Empty;
    [Parameter] public string Alt { get; set; } = string.Empty;
    [Parameter] public string CssClass { get; set; } = string.Empty;
    [Parameter] public string Style { get; set; } = string.Empty;

    private string CurrentImageUrl = string.Empty;
    private int currentStrategyIndex = 0;
    private List<Func<string, string, string>> imageStrategies = new();

    protected override void OnInitialized()
    {
        InitializeImageStrategies();
        CurrentImageUrl = GetNextImageUrl();
    }

    private void InitializeImageStrategies()
    {
        imageStrategies = new List<Func<string, string, string>>
        {
            // Strategy 1: Picsum Photos (Lorem Picsum) - reliable and fast
            (make, model) => $"https://picsum.photos/400/300?random={GetImageSeed(make, model)}",
            
            // Strategy 2: DummyImage.com - reliable placeholder service
            (make, model) => $"https://dummyimage.com/400x300/4a90e2/ffffff&text={Uri.EscapeDataString($"{make} {model}")}",
            
            // Strategy 3: JSONPlaceholder photos - another reliable service
            (make, model) => $"https://jsonplaceholder.typicode.com/photos/{(GetImageSeed(make, model) % 5000) + 1}",
            
            // Strategy 4: Local SVG fallback - always works
            (make, model) => GenerateLocalCarImage(make, model)
        };
    }

    private string GetNextImageUrl()
    {
        if (currentStrategyIndex < imageStrategies.Count)
        {
            return imageStrategies[currentStrategyIndex](Make, Model);
        }
        
        // If all strategies fail, return the local SVG
        return GenerateLocalCarImage(Make, Model);
    }

    private async Task OnImageError(ErrorEventArgs args)
    {
        // Move to next strategy on error
        currentStrategyIndex++;
        CurrentImageUrl = GetNextImageUrl();
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnImageLoad(ProgressEventArgs args)
    {
        // Image loaded successfully, no action needed
        await Task.CompletedTask;
    }

    private int GetImageSeed(string make, string model)
    {
        // Generate a consistent seed based on make and model for consistent images
        return Math.Abs((make + model).GetHashCode()) % int.MaxValue;
    }

    private string GenerateLocalCarImage(string make, string model)
    {
        // Generate a simple SVG image as a fallback
        var colors = new[] { "#4a90e2", "#7ed321", "#f5a623", "#d0021b", "#9013fe", "#50e3c2", "#bd10e0", "#b8e986" };
        var colorIndex = Math.Abs((make + model).GetHashCode()) % colors.Length;
        var color = colors[colorIndex];
        
        var svg = $@"
            <svg width=""400"" height=""300"" xmlns=""http://www.w3.org/2000/svg"">
                <defs>
                    <linearGradient id=""grad{colorIndex}"" x1=""0%"" y1=""0%"" x2=""100%"" y2=""100%"">
                        <stop offset=""0%"" style=""stop-color:{color};stop-opacity:1"" />
                        <stop offset=""100%"" style=""stop-color:{color}aa;stop-opacity:1"" />
                    </linearGradient>
                </defs>
                <rect width=""400"" height=""300"" fill=""url(#grad{colorIndex})"" />
                <text x=""200"" y=""120"" font-family=""Arial, sans-serif"" font-size=""28"" font-weight=""bold"" 
                      text-anchor=""middle"" fill=""white"" stroke=""rgba(0,0,0,0.3)"" stroke-width=""1"">{make}</text>
                <text x=""200"" y=""160"" font-family=""Arial, sans-serif"" font-size=""22"" 
                      text-anchor=""middle"" fill=""white"" stroke=""rgba(0,0,0,0.3)"" stroke-width=""1"">{model}</text>
                
                <!-- Car silhouette -->
                <g transform=""translate(200,200)"">
                    <!-- Car body -->
                    <ellipse cx=""0"" cy=""0"" rx=""80"" ry=""25"" fill=""rgba(255,255,255,0.3)"" />
                    <rect x=""-60"" y=""-15"" width=""120"" height=""30"" rx=""15"" fill=""rgba(255,255,255,0.3)"" />
                    
                    <!-- Wheels -->
                    <circle cx=""-40"" cy=""20"" r=""12"" fill=""rgba(255,255,255,0.4)"" />
                    <circle cx=""40"" cy=""20"" r=""12"" fill=""rgba(255,255,255,0.4)"" />
                    <circle cx=""-40"" cy=""20"" r=""8"" fill=""rgba(0,0,0,0.3)"" />
                    <circle cx=""40"" cy=""20"" r=""8"" fill=""rgba(0,0,0,0.3)"" />
                    
                    <!-- Windows -->
                    <rect x=""-50"" y=""-25"" width=""100"" height=""15"" rx=""8"" fill=""rgba(255,255,255,0.2)"" />
                </g>
            </svg>";
        
        var base64 = Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(svg));
        return $"data:image/svg+xml;base64,{base64}";
    }
}
